##########################
#  Configuration
###########################


# Tmux prefix
# Current solution is to keep the default
# and have term map C-; to C-b. This is the nicest
# bind I've found and this is the only way to enable it in tmux
unbind C-b
set -g prefix C-a
bind C-a send-prefix

#### tmux sensible config start ########
# address vim mode switching delay (http://superuser.com/a/252717/65504)
set -sg escape-time 0

# increase scrollback buffer size
set -g history-limit 50000

# tmux messages are displayed for 4 seconds
set -g display-time 4000

# refresh 'status-left' and 'status-right' more often
set -g status-interval 5

# focus events enabled for terminals that support them
set -g focus-events on

# super useful when using "grouped sessions" and multi-monitor setup
setw -g aggressive-resize on

set-option -g default-shell /opt/homebrew/bin/bash
# set only on OS X where it's required
# enable pbcopy and pbpaste
# https://github.com/ChrisJohnsen/tmux-MacOSX-pasteboard/blob/master/README.md
set-option -g default-command "reattach-to-user-namespace -l $SHELL"

#### tmux sensible config end ########

# refer to docs/terminals/tmuxConfig.txt
 # set -g default-terminal "tmux-256color"

set -s set-clipboard external

# use vim key bindings
setw -g mode-keys vi

# scroll, clickable windows and panes ,resizable panes
set -g mouse on

# increase repeat time for repeatable commands
set -g repeat-time 1000

# start window index at 1 instead of 0
set -g base-index 1
# start pane index at 1 instead of 0
setw -g pane-base-index 1

# highlight window when it has new activity
setw -g monitor-activity on
set -g visual-activity on

# re-number windows when one is closed
set -g renumber-windows on
# Prevent auto-renaming windows
set -g allow-rename off


###########################
#  Key Bindings
###########################

# force a reload of the config file
unbind r
bind r source-file ~/.config/tmux/tmux.conf \; display "Tmux Config Reloaded!"

# Copy vim style
# create 'v' alias for selecting text
# bind P paste-buffer
bind-key -T copy-mode-vi v send-keys -X begin-selection
# bind-key -T copy-mode-vi y send-keys -X copy-selection

# Setup 'v' to begin selection as in Vim
# bind-key -T copy-mode-vi v send-keys -X begin-selection
# bind-key -T copy-mode-vi y send-keys -X copy-pipe "reattach-to-user-namespace pbcopy"

# not sure about rectangle-toggle
# bind-key -T copy-mode-vi r send-keys -X rectangle-toggle

# panes: window splitting
unbind %
bind | split-window -h
unbind '"'
bind - split-window -v

# Switch panes with hjkl
bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R

# Smart pane switching with awareness of Vim splits.
# See: https://github.com/christoomey/vim-tmux-navigator
is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"
bind-key -n 'C-h' if-shell "$is_vim" 'send-keys C-h'  'select-pane -L'
bind-key -n 'C-j' if-shell "$is_vim" 'send-keys C-j'  'select-pane -D'
bind-key -n 'C-k' if-shell "$is_vim" 'send-keys C-k'  'select-pane -U'
bind-key -n 'C-l' if-shell "$is_vim" 'send-keys C-l'  'select-pane -R'
tmux_version='$(tmux -V | sed -En "s/^tmux ([0-9]+(.[0-9]+)?).*/\1/p")'
if-shell -b '[ "$(echo "$tmux_version < 3.0" | bc)" = 1 ]' \
    "bind-key -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\'  'select-pane -l'"
if-shell -b '[ "$(echo "$tmux_version >= 3.0" | bc)" = 1 ]' \
    "bind-key -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\\\'  'select-pane -l'"

bind-key -T copy-mode-vi 'C-h' select-pane -L
bind-key -T copy-mode-vi 'C-j' select-pane -D
bind-key -T copy-mode-vi 'C-k' select-pane -U
bind-key -T copy-mode-vi 'C-l' select-pane -R
bind-key -T copy-mode-vi 'C-\' select-pane -l

# Quick window selection
bind -r C-h select-window -t :-
bind -r C-l select-window -t :+

# resize panes
bind -r H resize-pane -L 5
bind -r J resize-pane -D 5
bind -r K resize-pane -U 5
bind -r L resize-pane -R 5

############################
## Status Bar
############################

# enable UTF-8 support in status bar
set -gq status-utf8 on

###########################
# Plugins
###########################
# Setup TPM first
#   1) Check instructions on GitHub
# To install plugins:
#   1) Add plugin down here
#   2) Prefix + I to install plugin
# To update plugins:
#   1) Prefix + U
# To remove plugins:
#   1) Remove line down here
#   2) Prefix + ALT + U

# fix ssh agent , tmux
#ref https://blog.testdouble.com/posts/2016-11-18-reconciling-tmux-and-ssh-agent-forwarding/
# https://stackoverflow.com/questions/21378569/how-to-auto-update-ssh-agent-environment-variables-when-attaching-to-existing-tm
# Remove SSH_AUTH_SOCK to disable tmux automatically resetting the variable
# set -g update-environment "DISPLAY SSH_ASKPASS SSH_AGENT_PID \
                             # SSH_CONNECTION WINDOWID XAUTHORITY"
# Use a symlink to look up SSH authentication
# setenv -g SSH_AUTH_SOCK $HOME/.ssh/ssh_auth_sock


# List of plugins
set -g @plugin 'tmux-plugins/tpm'

# Plugin to save and restore tmux sessions after restart
# * Save with: prefix + Ctrl-s
# * Restore with: prefix + Ctlr-r
set -g @plugin 'tmux-plugins/tmux-resurrect'
  # restore vim and nvim sessions as well
  # for vim
set -g @resurrect-strategy-vim 'session'
  # for neovim
set -g @resurrect-strategy-nvim 'session'
set -g @plugin 'tmux-plugins/tmux-continuum'
  # Automatic restore
set -g @continuum-restore 'on'

# Make navigation between tmux and vim panes seamlessly
set -g @plugin 'christoomey/vim-tmux-navigator'

# copy mode
# o - "open" a highlighted selection with the system default program. open for OS X or xdg-open for Linux.
# Ctrl-o - open a highlighted selection with the $EDITOR
# Shift-s - search the highlighted selection directly inside a search engine (defaults to google).
set -g @plugin 'tmux-plugins/tmux-open'

# Normal mode:
# prefix–y — copies text from the command line to the clipboard.
# prefix–Y — copy the current pane's current working directory to the clipboard.

# Copy mode:
# y — copy selection to system clipboard.
# Y (shift-y) — "put" selection. Equivalent to copying a selection, and pasting it to the command line.

set -g @plugin 'tmux-plugins/tmux-yank'

# prefix * - end the process running in the current pane with kill -9
set -g @plugin 'tmux-plugins/tmux-open'

# prefix P toggle logging
# prefix p toggle Screen Capture
# prefix alt+shit+p toggle complete history
# prefix alt+c toggle clear pane history
set -g @plugin 'tmux-plugins/tmux-logging'
set -g @logging-path "$HOME/.cache/tmux/tmux-logging"
set -g @screen-capture-path "$HOME/.cache/tmux/tmux-logging"
set -g @save-complete-history-path "$HOME/.cache/tmux/tmux-logging"

# prefix u
set -g @plugin 'wfxr/tmux-fzf-url'

# Press ( prefix + F ) to enter [fingers] mode
set -g @plugin 'Morantron/tmux-fingers'

set -g @plugin 'noscript/tmux-mighty-scroll'

set -g @plugin "arcticicestudio/nord-tmux"
# set -g @plugin 'dracula/tmux'
set -g @plugin 'christoomey/vim-tmux-navigator'
# fzf search

set -g @plugin 'laktak/extrakto'
set -g @extrakto_copy_key "tab"      # use tab to copy to clipboard
set -g @extrakto_insert_key "enter"  # use enter to insert selection
# Run Tmux Plugin Manager
run '~/.config/tmux/plugins/tpm/tpm'
